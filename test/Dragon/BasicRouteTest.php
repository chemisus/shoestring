<?php

namespace Dragon;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-16 at 13:25:25.
 */
class BasicRouteTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var BasicRoute
     */
    protected $object;

    /**
     * @var \Bootstrap\Request
     */
    protected $request;

    /**
     * @var callable
     */
    protected $callback;

    /**
     *
     * @var \Bootstrap\Response
     */
    protected $response;

    /**
     *
     * @var string
     */
    protected $pattern;

    /**
     *
     * @var string
     */
    protected $method;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->method = 'method';

        $this->pattern = '/^\/?path\/?$/';

        $this->path = '/path/';

        $this->request = $this->getMock('\\Bootstrap\\Request');

        $this->response = $response       = $this->getMock('\\Bootstrap\\Response');

        $this->callback = function () use ($response) {
                return $response;
            };

        $this->object = new BasicRoute($this->method, $this->pattern,
            $this->callback);

        $this->object->execute($this->request);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Dragon\BasicRoute::execute
     * @todo   Implement testExecute().
     */
    public function testExecute()
    {
        $this->request->expects($this->any())
            ->method('method')
            ->will($this->returnValue($this->method));

        $this->request->expects($this->any())
            ->method('path')
            ->will($this->returnValue($this->path));

        $result = $this->object->execute($this->request);

        $expect = $this->response;

        $this->assertEquals($expect, $result);
    }

    /**
     * @covers Dragon\BasicRoute::execute
     * @todo   Implement testExecute().
     */
    public function testExecuteMethod()
    {
        $this->request->expects($this->any())
            ->method('method')
            ->will($this->returnValue($this->method . 'a'));

        $this->request->expects($this->any())
            ->method('path')
            ->will($this->returnValue($this->path));

        $result = $this->object->execute($this->request);

        $expect = false;

        $this->assertEquals($expect, $result);
    }

    /**
     * @covers Dragon\BasicRoute::execute
     * @todo   Implement testExecute().
     */
    public function testExecutePath()
    {
        $this->request->expects($this->any())
            ->method('method')
            ->will($this->returnValue($this->method));

        $this->request->expects($this->any())
            ->method('path')
            ->will($this->returnValue($this->path . 'a'));

        $result = $this->object->execute($this->request);

        $expect = false;

        $this->assertEquals($expect, $result);
    }

}
