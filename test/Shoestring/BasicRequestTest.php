<?php

namespace Shoestring;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-16 at 12:27:02.
 */
class BasicRequestTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var BasicRequest
     */
    protected $object;

    /**
     *
     * @var callable
     */
    private $bodyCallback;

    /**
     *
     * @var string
     */
    private $body;

    /**
     *
     * @var array
     */
    private $form;

    /**
     *
     * @var array
     */
    private $headers;

    /**
     *
     * @var string
     */
    private $method;

    /**
     *
     * @var array
     */
    private $parameters;

    /**
     *
     * @var string
     */
    private $path;

    /**
     *
     * @var string
     */
    private $protocol;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->form         = ['form'];
        $this->headers      = ['headers'];
        $this->parameters   = ['parameters'];
        $this->method       = 'method';
        $this->path         = 'path';
        $this->protocol     = 'protocol';
        $this->body         = $body               = 'body';
        $this->bodyCallback = function () use ($body) {
                return $body;
            };

        $this->object = new BasicRequest($this->bodyCallback, $this->form,
            $this->headers, $this->method, $this->parameters, $this->path,
            $this->protocol);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Shoestring\BasicRequest::body
     * @todo   Implement testBody().
     */
    public function testBody()
    {
        $result = $this->object->body();

        $expect = $this->body;

        $this->assertEquals($expect, $result);
    }

    /**
     * @covers Shoestring\BasicRequest::form
     * @todo   Implement testForm().
     */
    public function testForm()
    {
        $result = $this->object->form();

        $expect = $this->form;

        $this->assertEquals($expect, $result);
    }

    /**
     * @covers Shoestring\BasicRequest::headers
     * @todo   Implement testHeaders().
     */
    public function testHeaders()
    {
        $result = $this->object->headers();

        $expect = $this->headers;

        $this->assertEquals($expect, $result);
    }

    /**
     * @covers Shoestring\BasicRequest::method
     * @todo   Implement testMethod().
     */
    public function testMethod()
    {
        $result = $this->object->method();

        $expect = $this->method;

        $this->assertEquals($expect, $result);
    }

    /**
     * @covers Shoestring\BasicRequest::parameters
     * @todo   Implement testParameters().
     */
    public function testParameters()
    {
        $result = $this->object->parameters();

        $expect = $this->parameters;

        $this->assertEquals($expect, $result);
    }

    /**
     * @covers Shoestring\BasicRequest::path
     * @todo   Implement testPath().
     */
    public function testPath()
    {
        $result = $this->object->path();

        $expect = $this->path;

        $this->assertEquals($expect, $result);
    }

    /**
     * @covers Shoestring\BasicRequest::protocol
     * @todo   Implement testProtocol().
     */
    public function testProtocol()
    {
        $result = $this->object->protocol();

        $expect = $this->protocol;

        $this->assertEquals($expect, $result);
    }

}
